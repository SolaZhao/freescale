%-Driver generated by the Component Wizard
%-      Copyright Freescale Semiconductor, Inc.
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for losing or damaging your code!
%-
%-
%- readyCPU ...
%-
%apploc revDate 16.04.2007
%apploc revVer  01.03
%apploc revLvl  6
%apploc revAuth LU
%apploc revVrf  RH
%apploc revCmnt_2 Fixed inherited event OnInterrupt
%-
%apploc revDate 21.11.2005
%apploc revVer  01.02
%apploc revLvl  4
%apploc revAuth JCh
%apploc revVrf  RH
%apploc revCmnt_1 Description of internal method added.
%-
%apploc revDate 25.10.2004
%apploc revVer  01.01
%apploc revLvl  9
%apploc revAuth LL
%apploc revVrf  RH
%apploc revCmnt_0 TEXTHELP section removed.
%-
%define DriverAuthor  Author
%define DriverVersion 01.03
%define DriverDate    02.06.2000
%if Language='ANSIC'
%-
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_OnInterrupt This event is called when an active signal edge/level has occurred.
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%-
%INTERFACE
%define! Settings Common\TwoKeysSettings.Inc
%define! Abstract Common\TwoKeysAbstract.Inc
%include Common\Header.h

#ifndef __%ModuleName
#define __%ModuleName

%ifdef SharedModules
/*Include shared modules, which are used for whole project*/
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%else
  %for var from ModuleList
#include "%'var'.h"
  %endfor
%endif

#include "%ProcessorModule.h"
%-STARTUSERTYPES - Do not make changes in this part
%-ENDUSRTYPES
/* MODULE %ModuleName. */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES

%-INHERITED_EVENT_BEGIN InterruptPin OnInterrupt
%ifdef OnKeyPress
void %@InterruptPin@OnInterrupt(void);
%include Common\GeneralInternal.inc (OnInterrupt)
%endif OnKeyPress

%-INHERITED_EVENT_END InterruptPin OnInterrupt
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
void %'ModuleName'%.%GetVal(bool *But1,bool *But2);
%define! ParBut1
%define! ParBut2
%include Common\TwoKeysGetVal.Inc

%endif %- GetVal
%-BW_METHOD_END GetVal
%-BW_METHOD_BEGIN Disable
%ifdef Disable
void %'ModuleName'%.%Disable(void);
%include Common\TwoKeysDisable.Inc

%endif %- Disable
%-BW_METHOD_END Disable
%-BW_METHOD_BEGIN Enable
%ifdef Enable
void %'ModuleName'%.%Enable(void);
%include Common\TwoKeysEnable.Inc

%endif %- Enable
%-BW_METHOD_END Enable


/* END %ModuleName. */

#endif /* ifndef __%ModuleName */
%include Common\Header.End
%-
%-BW_METHOD_BEGIN OnKeyPress
%ifdef OnKeyPress
%INTERFACE OnKeyPress
void %OnKeyPress(bool But1,bool But2,bool Down);
%define! ParBut1
%define! ParBut2
%define! ParDown
%include Common\TwoKeysOnKeyPress.Inc

%endif %- OnKeyPress
%-BW_METHOD_END OnKeyPress
%IMPLEMENTATION
%define! Settings Common\TwoKeysSettings.Inc
%define! Abstract Common\TwoKeysAbstract.Inc
%include Common\Header.C


/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"

%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
%define! ParBut1
%define! ParBut2
%include Common\TwoKeysGetVal.Inc
void %'ModuleName'%.%GetVal(bool *But1,bool *But2)
{
  *But1 = %@Button1@'ModuleName'%.GetVal();
  *But2 = %@Button2@'ModuleName'%.GetVal();
}

%endif %- GetVal
%-BW_METHOD_END GetVal
%-BW_METHOD_BEGIN Disable
%ifdef Disable
%include Common\TwoKeysDisable.Inc
void %'ModuleName'%.%Disable(void)
{
  %@InterruptPin@'ModuleName'%.Disable();
}

%endif %- Disable
%-BW_METHOD_END Disable
%-BW_METHOD_BEGIN Enable
%ifdef Enable
%include Common\TwoKeysEnable.Inc
void %'ModuleName'%.%Enable(void)
{
  %@InterruptPin@'ModuleName'%.Enable();
}

%endif %- Enable
%-BW_METHOD_END Enable
%-INHERITED_EVENT_BEGIN InterruptPin OnInterrupt
%ifdef @InterruptPin@OnInterrupt
%include Common\GeneralInternal.inc (OnInterrupt)
void %@InterruptPin@OnInterrupt(void)
{
  bool But1, But2, press;
  %'ModuleName'_GetVal( &But1, &But2 );
  press = %@InterruptPin@'ModuleName'%.GetVal();
  %ifdef OnKeyPress
  %OnKeyPress( But1, But2, press );
  %endif
}
%endif %- @InterruptPin@OnInterrupt
%-INHERITED_EVENT_END InterruptPin OnInterrupt

/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_METHOD_BEGIN OnKeyPress
%ifdef OnKeyPress
%IMPLEMENTATION OnKeyPress
%define! ParBut1
%define! ParBut2
%define! ParDown
%include Common\TwoKeysOnKeyPress.Inc
void %OnKeyPress(bool But1,bool But2,bool Down)
{
  /* Write your code here ... */
   (void)But1;                                                   %>>/* Suppress compiler warning about parameter not being used */
   (void)But2;                                                   %>>/* Suppress compiler warning about parameter not being used */
   (void)Down;                                                   %>>/* Suppress compiler warning about parameter not being used */
}

%endif %- OnKeyPress
%-BW_METHOD_END OnKeyPress

%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%-
%DEBUG
%ALL_SYMBOLS
%-
