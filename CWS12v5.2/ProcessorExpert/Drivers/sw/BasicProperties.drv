%-Driver generated by the Componnet Wizard
%-      Copyright Freescale Semiconductor, Inc.
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Componnet Wizard will not be responsible for loosing or damaging your code!
%-
%-
%define DriverAuthor  Processor Expert/LU
%define DriverVersion 01.01
%define DriverDate    03.04.2003
%-
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\BasicPropertiesSettings.Inc
%define! Abstract Common\BasicPropertiesAbstract.Inc
%include Common\Header.h

#ifndef __%ModuleName
#define __%ModuleName

/* MODULE %ModuleName. */

%ifdef SharedModules
/*Include shared modules, which are used for whole project*/
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H';
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H';

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-BW_METHOD_BEGIN Method1
%ifdef Method1
void %'ModuleName'%.%Method1(void);
%include Common\BasicPropertiesMethod1.Inc

%endif %- Method1
%-BW_METHOD_END Method1
%-BW_METHOD_BEGIN Method2
%ifdef Method2
void %'ModuleName'%.%Method2(void);
%include Common\BasicPropertiesMethod2.Inc

%endif %- Method2
%-BW_METHOD_END Method2
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif /* ifndef __%ModuleName */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\BasicPropertiesSettings.Inc
%define! Abstract Common\BasicPropertiesAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M';
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M';

%-BW_CUSTOM_VARIABLE_START
%- Write your global variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_IMPLEMENT_START
%-BW_METHOD_BEGIN Method1
%ifdef Method1
%include Common\BasicPropertiesMethod1.Inc
void %'ModuleName'%.%Method1(void)
{
%CODE_BEGIN
  /* Write method implementation here ... */
%CODE_END
}

%endif %- Method1
%-BW_METHOD_END Method1
%-BW_METHOD_BEGIN Method2
%ifdef Method2
%include Common\BasicPropertiesMethod2.Inc
void %'ModuleName'%.%Method2(void)
{
%CODE_BEGIN
  /* Write method implementation here ... */
%CODE_END
}

%endif %- Method2
%-BW_METHOD_END Method2
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler!%--
%endif %- Language (& Compiler)
%-
%DEBUG
%ALL_SYMBOLS
%-