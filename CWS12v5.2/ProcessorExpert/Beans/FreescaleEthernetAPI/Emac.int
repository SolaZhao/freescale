<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>Emac</Name>
  <Description>Interface NE64\Emac for bean NE64, generated by Bean Wizard</Description>
  <Author>Author</Author>
  <Version>01.007</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>MIIwrite</Name>
        <Symbol>MIIwrite</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Writes internal EPHY registers through EMAC MII serial management interface.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>tU08</ReturnType>
        <RetHint>0xff = operation completed OK \n0x00 = MII busy</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>_mpadr</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>address of the device</ParHint>
        </Parameter>
        <Parameter>
          <ParName>_mradr</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>address of the register within the device</ParHint>
        </Parameter>
        <Parameter>
          <ParName>_mwdata</ParName>
          <ParType>tU16</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>data to write to the PHY register</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>tU08 #M#_#C#(tU08 _mpadr, tU08 _mradr, tU16 _mwdata)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>MIIread</Name>
        <Symbol>MIIread</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Reads internal EPHY registers through EMAC MII serial management interface.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>tU08</ReturnType>
        <RetHint>0xff = operation completed OK \n0x00 = MII busy</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>_mpadr</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>address of the device</ParHint>
        </Parameter>
        <Parameter>
          <ParName>_mradr</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>address of the register within the device</ParHint>
        </Parameter>
        <Parameter>
          <ParName>_mrdata</ParName>
          <ParType>tU16</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>pointer to where to store the received contents of PHY register</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>tU08 #M#_#C#(tU08 _mpadr, tU08 _mradr, tU16 *_mrdata)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherInit</Name>
        <Symbol>EtherInit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This function initializes the NE64 EMAC and EPHY and sets speed and duplex based on the users configuation.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>0</ParamCount>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherType</Name>
        <Symbol>EtherType</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This function sets the Ethertype acceptance registers based on the users configuration.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>control</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>the acceptance mask</ParHint>
        </Parameter>
        <Parameter>
          <ParName>etype</ParName>
          <ParType>tU16</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>programmable ethertype</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(tU08 control, tU16 etype)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherIoctl</Name>
        <Symbol>EtherIoctl</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sets the multicast hash table.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>flag</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>either MC_ALL or MC_LIST</ParHint>
        </Parameter>
        <Parameter>
          <ParName>optionPtr</ParName>
          <ParType>pointer</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>pointer to address list (valid only if flag == MC_LIST)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>optionLen</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>number of addresses in list (valid only if flag == MC_LIST)</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(tU08 flag, void* optionPtr, tU08 optionLen)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherGetPhysAddr</Name>
        <Symbol>EtherGetPhysAddr</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns EMAC current physical address.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>ethaddr</ParName>
          <ParType>pointer</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>pointer to place (6 bytes) where the physical address will be stored to</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void* ethaddr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherSend</Name>
        <Symbol>EtherSend</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This function sends one frame.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>databuf</ParName>
          <ParType>pointer</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>pointer to data which should be sent</ParHint>
        </Parameter>
        <Parameter>
          <ParName>datalen</ParName>
          <ParType>tU16</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>length of the data to be sent</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void* databuf, tU16 datalen)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherReceive</Name>
        <Symbol>EtherReceive</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This function reads the received frame.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>tU16</ReturnType>
        <RetHint>length of the received data (if 0 - then no data received)</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>buffer</ParName>
          <ParType>pointer</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>pointer to place where the physical address will be stored</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>tU16 #M#_#C#(void* buffer)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherReceiveZeroCopy</Name>
        <Symbol>EtherReceiveZeroCopy</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This function reads the received frame with zero copy.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>tU16</ReturnType>
        <RetHint>Number of received bytes.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>whichbuffer</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the buffer.</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>tU16 #M#_#C#(tU08 *whichbuffer)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherOpen</Name>
        <Symbol>EtherOpen</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This function initializes the NE64 EMAC.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>8</ParamCount>
        <Parameter>
          <ParName>miisetup</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>mii preamble &amp; clock setup</ParHint>
        </Parameter>
        <Parameter>
          <ParName>bufmap</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>buffer configuration (see tables 3-5&amp;3-6 in EMAC doc.)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>maxfl</ParName>
          <ParType>tU16</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>initial max.frame length for receive</ParHint>
        </Parameter>
        <Parameter>
          <ParName>pmacad</ParName>
          <ParType>pointer</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>pointer to MAC address definition</ParHint>
        </Parameter>
        <Parameter>
          <ParName>control</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>the acceptance mask (same as in EtherType function)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>etype</ParName>
          <ParType>tU16</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>programmable ethertype (16bit value)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>rxmode</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>reception mode settings (see RXCT_X possible values)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>netctl</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>network control setup (see NETCT_X possible values)</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(tU08 miisetup, tU08 bufmap, tU16 maxfl, void* pmacad, tU08 control, tU16 etype, tU08 rxmode, tU08 netctl)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherClose</Name>
        <Symbol>EtherClose</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This function switches off the EMAC and clear interrupt flags.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>0</ParamCount>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EmacDisable</Name>
        <Symbol>EmacDisable</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Switches off the EMAC.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>0</ParamCount>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EmacEnable</Name>
        <Symbol>EmacEnable</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Switches on the EMAC.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>0</ParamCount>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EmacControl</Name>
        <Symbol>EmacControl</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sets control bits in EMAC netctl register.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>netctl</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value of netctl register</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(tU08 netctl)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherAbortTx</Name>
        <Symbol>EtherAbortTx</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Aborts TX in progress.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>0</ParamCount>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherPause</Name>
        <Symbol>EtherPause</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This function sends PAUSE frame.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>tU16</ReturnType>
        <RetHint>Current PAUSE counter value</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>ptrc</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>if 1 ptime used for PAUSE time setting, if 0 ptime not used</ParHint>
        </Parameter>
        <Parameter>
          <ParName>ptime</ParName>
          <ParType>tU16</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>value of PAUSE timer</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>tU16 #M#_#C#(tU08 ptrc, tU16 ptime)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EtherOtherTx</Name>
        <Symbol>EtherOtherTx</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This function sets up of other TX parameters.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>txpar</ParName>
          <ParType>tU08</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>acceptable values (see TXCT_X possible values)</ParHint>
        </Parameter>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(tU08 txpar)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ExternalBusCfg</Name>
        <Symbol>ExternalBusCfg</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This function sets up external bus mode and forces the bus clock to 16 Mhz which is the external bus mode maximum. The function needs to be located in main().</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>0</ParamCount>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>UseSWLedRun</Name>
        <Symbol>UseSWLedRun</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This function turns off EPHY indicator LED when driven by software. The function need to be located in main() and required a global counter called, LEDcounter. lternatively, this code can be can be placed in a timer function .</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>0</ParamCount>
        <Scope>PUBLISHED</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>FreescaleEMAC</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>tU08</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint> unsigned char tU08 ;\n</PreparedHint>
      <Type> unsigned char tU08 ;</Type>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>tU16</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint> unsigned int tU16 ;\n</PreparedHint>
      <Type> unsigned int tU16 ;</Type>
      <HWTestType>pointer</HWTestType>
    </Type>
  </UserTypes>
</Interface>
