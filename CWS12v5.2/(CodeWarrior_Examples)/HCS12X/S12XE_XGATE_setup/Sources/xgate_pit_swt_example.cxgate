/******************************************************************************
													Copyright (c) Freescale 2008
Current Revision :	$Revision: 1.2 $

PURPOSE: XGATE service routines and vector table for the S12XEP100.                       
                                                                          
 ***********************************************************************  
 *  THIS CODE IS ONLY INTENDED AS AN EXAMPLE OF CODE FOR THE           *  
 *  METROWERKS COMPILER AND THE S12X EVB AND HAS ONLY BEEN GIVEN A     *  
 *  MIMIMUM LEVEL OF TEST. IT IS PROVIDED 'AS SEEN' WITH NO GUARANTEES *  
 *  AND NO PROMISE OF SUPPORT.                                         *  
 ***********************************************************************  
                                                                          
DESCRIPTION:  function main() providing initial program entry.                                             
                                                                          
UPDATE HISTORY                                                            
REV  AUTHOR    DATE        DESCRIPTION OF CHANGE                          
---  ------    --------    ---------------------                          
1.0  r32151    01/03/08    - initial coding              
                                                                          

*******************************************************************************
Freescale reserves the right to make changes without further notice to any
product herein to improve reliability, function or design. Freescale does
not assume any liability arising out ot the application or use of any
product, circuit, or software described herein; neither does it convey any
license under its patent rights nor the rights of others. Freescale products
are not designed, intended, or authorized for use as components in systems
intended for surgical implant into the body, or other applications intended
to support life, or for any other application in which the failure of the
Freescale product could create a situation where personal injury or death may
occur. Should Buyer purchase or use Freescale products for any such unintended
or unauthorized application, Buyer shall idemnify and hold Freescale and its
officers, employees, subsidiaries, affiliates, and distributors harmless
against all claims costs, damages, and expenses, and reasonable attorney fees
arising out of, dirTimerly or indirTimerly, any claim of personal injury or death
associated with such unintended or unathorized use, even if such claim alleges
that Freescale was negligent regarding the design or manufacture of the part.
Freescale and the Freescale logo* are registered trademarks of Freescale Ltd.
******************************************************************************/

#include <hidef.h>            /* common defines and macros */
#include "derivative.h"
#include "xgate.h"
#include "intrinsics_xgate.h"

#pragma DATA_SEG XGATE_DATA
/* these two arrays are used to define space in the XGATE RAM for the low and
   high priority stacks. They not are referenced in the application as they 
   are only used implicitly for XGATE stack operations. */
volatile unsigned int XgateHiStack[XGATE_HI_STACK_SIZE];
volatile unsigned int XgateLoStack[XGATE_LO_STACK_SIZE];

 
/*****************************************************************************/
/********* XGATE SERVICE ROUTINES ********************************************/
/*****************************************************************************/

/******************************************************************************  
Function Name  : SoftwareTrigger0_XSR		  
Engineer       : 	
Date           : 14/05/2008
Parameters     : MyType1*
Returns        : NONE
Notes          : Thread to update data in the structure pointed at by the 
                 default parameter. 
                 Raises sif on the CPU.
******************************************************************************/
/*** Data ***/
static tDescriptor1 STRCH0_Data = { 0 };

/*** code ***/
interrupt void SoftwareTrigger0_XSR(tDescriptor1* pData) {  
      /* clear the software trigger flag */
  XGSWT= 0x0100;

  pData->counter++;
  if (pData->counter > 3)  {
    pData->counter= 0; 
    _sif();
  }
}

/******************************************************************************  
Function Name  : PIT_XSR		  
Engineer       : 	
Date           : 14/05/2008
Parameters     : MyType2*
Returns        : NONE
Notes          : Thread to update data in the structure pointed at by the 
                 default parameter. 
                 Uses the mask in the channel field of MyTYPE2 to clear the 
                 approporate PIT request flag.
                 Raises sif on the CPU.
******************************************************************************/
/*** Data ***/
static tDescriptor2 PITCH0_Data = { 0, PITTF_PTF0_MASK, 0 };

/*** Code ***/
interrupt void PIT_XSR(tDescriptor2* pData) {
     /* clear the appropriate PIT interrupt flag */
  PITTF = pData->channel;
  
  pData->counter++;
  if (pData->counter > 3)  {
    pData->counter= 0; 
   _sif();
  }
}


// default interrupt handler for all others
interrupt void ErrorHandler(int dataptr) {
  int chanNum= dataptr;
  asm BRK;
}

#pragma CONST_SEG XGATE_VECTORS  /* assign the vector table in separate segment for dedicated placement in linker parameter file */

const XGATE_TableEntry XGATE_VectorTable[] = {
                         // Channel # = Vector address / 2
  /* channel 0..1E are not used, first used must match macro XGATE_VECTOR_OFFSET in xgate.h */
  {ErrorHandler, 0x1E},  // Channel 1E - ATD1 compare                          
  {ErrorHandler, 0x1F},  // Channel 1F - ATD0 compare                          
  {ErrorHandler, 0x20},  // Channel 20 - TIM Pulse accumulator input edge     
  {ErrorHandler, 0x21},  // Channel 21 - TIM Pulse accumulator A overflow     
  {ErrorHandler, 0x22},  // Channel 22 - TIM overflow  
  {ErrorHandler, 0x23},  // Channel 23 - TIM channel 7                         
  {ErrorHandler, 0x24},  // Channel 24 - TIM channel 6 
  {ErrorHandler, 0x25},  // Channel 25 - TIM channel 5 
  {ErrorHandler, 0x26},  // Channel 26 - TIM channel 4 
  {ErrorHandler, 0x27},  // Channel 27 - TIM channel 3 
  {ErrorHandler, 0x28},  // Channel 28 - TIM channel 2 
  {ErrorHandler, 0x29},  // Channel 29 - TIM channel 1 
  {ErrorHandler, 0x2A},  // Channel 2A - TIM channel 0 
  {ErrorHandler, 0x2B},  // Channel 2B - SCI7                     
  {ErrorHandler, 0x2C},  // Channel 2C - Periodic Interrupt Timer 7          
  {ErrorHandler, 0x2D},  // Channel 2D - Periodic Interrupt Timer 6          
  {ErrorHandler, 0x2E},  // Channel 2E - Periodic Interrupt Timer 5          
  {ErrorHandler, 0x2F},  // Channel 2F - Periodic Interrupt Timer 4          
  {ErrorHandler, 0x30},  // Channel 30 - Reserved
  {ErrorHandler, 0x31},  // Channel 31 - Reserved     
  {ErrorHandler, 0x32},  // Channel 32 - XGATE Software Trigger 7           
  {ErrorHandler, 0x33},  // Channel 33 - XGATE Software Trigger 6           
  {ErrorHandler, 0x34},  // Channel 34 - XGATE Software Trigger 5           
  {ErrorHandler, 0x35},  // Channel 35 - XGATE Software Trigger 4           
  {ErrorHandler, 0x36},  // Channel 36 - XGATE Software Trigger 3           
  {ErrorHandler, 0x37},  // Channel 37 - XGATE Software Trigger 2           
  {ErrorHandler, 0x38},  // Channel 38 - XGATE Software Trigger 1           
  {(XGATE_Function)SoftwareTrigger0_XSR, (int)&STRCH0_Data}, // Channel 39 - XGATE Software Trigger 0           
  {ErrorHandler, 0x3A},  // Channel 3A - Periodic Interrupt Timer 3          
  {ErrorHandler, 0x3B},  // Channel 3B - Periodic Interrupt Timer 2          
  {ErrorHandler, 0x3C},  // Channel 3C - Periodic Interrupt Timer 1          
  {(XGATE_Function)PIT_XSR, (int)&PITCH0_Data},              // Channel 3D - Periodic Interrupt Timer 0          
  {ErrorHandler, 0x3E},  // Channel 3E - Reserved                           
  {ErrorHandler, 0x3F},  // Channel 3F - Autonomous Periodical interrupt API
  {ErrorHandler, 0x40},  // Channel 40 - Low Voltage interrupt LVI
  {ErrorHandler, 0x41},  // Channel 41 - IIC1 Bus                 
  {ErrorHandler, 0x42},  // Channel 42 - SCI5                     
  {ErrorHandler, 0x43},  // Channel 43 - SCI4                     
  {ErrorHandler, 0x44},  // Channel 44 - SCI3                     
  {ErrorHandler, 0x45},  // Channel 45 - SCI2                     
  {ErrorHandler, 0x46},  // Channel 46 - PWM Emergency Shutdown   
  {ErrorHandler, 0x47},  // Channel 47 - Port P Interrupt         
  {ErrorHandler, 0x48},  // Channel 48 - CAN4 transmit            
  {ErrorHandler, 0x49},  // Channel 49 - CAN4 receive             
  {ErrorHandler, 0x4A},  // Channel 4A - CAN4 errors              
  {ErrorHandler, 0x4B},  // Channel 4B - CAN4 wake-up             
  {ErrorHandler, 0x4C},  // Channel 4C - CAN3 transmit            
  {ErrorHandler, 0x4D},  // Channel 4D - CAN3 receive             
  {ErrorHandler, 0x4E},  // Channel 4E - CAN3 errors              
  {ErrorHandler, 0x4F},  // Channel 4F - CAN3 wake-up             
  {ErrorHandler, 0x50},  // Channel 50 - CAN2 transmit
  {ErrorHandler, 0x51},  // Channel 51 - CAN2 receive 
  {ErrorHandler, 0x52},  // Channel 52 - CAN2 errors  
  {ErrorHandler, 0x53},  // Channel 53 - CAN2 wake-up 
  {ErrorHandler, 0x54},  // Channel 54 - CAN1 transmit
  {ErrorHandler, 0x55},  // Channel 55 - CAN1 receive 
  {ErrorHandler, 0x56},  // Channel 56 - CAN1 errors  
  {ErrorHandler, 0x57},  // Channel 57 - CAN1 wake-up 
  {ErrorHandler, 0x58},  // Channel 58 - CAN0 transmit
  {ErrorHandler, 0x59},  // Channel 59 - CAN0 receive 
  {ErrorHandler, 0x5A},  // Channel 5A - CAN0 errors  
  {ErrorHandler, 0x5B},  // Channel 5B - CAN0 wake-up 
  {ErrorHandler, 0x5C},  // Channel 5C - FLASH 
  {ErrorHandler, 0x5D},  // Channel 5D - FLASH fault detect
  {ErrorHandler, 0x5E},  // Channel 5E - SPI2  
  {ErrorHandler, 0x5F},  // Channel 5F - SPI1
  {ErrorHandler, 0x60},  // Channel 60 - IIC0 Bus                         
  {ErrorHandler, 0x61},  // Channel 61 - SCI6                         
  {ErrorHandler, 0x62},  // Channel 62 - CRG Self Clock Mode              
  {ErrorHandler, 0x63},  // Channel 63 - CRG PLL lock                     
  {ErrorHandler, 0x64},  // Channel 64 - Pulse Accumulator B Overflow     
  {ErrorHandler, 0x65},  // Channel 65 - Modulus Down Counter underflow   
  {ErrorHandler, 0x66},  // Channel 66 - Port H                           
  {ErrorHandler, 0x67},  // Channel 67 - Port J                           
  {ErrorHandler, 0x68},  // Channel 68 - ATD1                             
  {ErrorHandler, 0x69},  // Channel 69 - ATD0                             
  {ErrorHandler, 0x6A},  // Channel 6A - SCI1                             
  {ErrorHandler, 0x6B},  // Channel 6B - SCI0                             
  {ErrorHandler, 0x6C},  // Channel 6C - SPI0                             
  {ErrorHandler, 0x6D},  // Channel 6D - ECT Pulse accumulator input edge     
  {ErrorHandler, 0x6E},  // Channel 6E - ECT Pulse accumulator A overflow     
  {ErrorHandler, 0x6F},  // Channel 6F - Enhanced Capture Timer overflow  
  {ErrorHandler, 0x70},  // Channel 70 - Enhanced Capture Timer channel 7                            
  {ErrorHandler, 0x71},  // Channel 71 - Enhanced Capture Timer channel 6 
  {ErrorHandler, 0x72},  // Channel 72 - Enhanced Capture Timer channel 5 
  {ErrorHandler, 0x73},  // Channel 73 - Enhanced Capture Timer channel 4 
  {ErrorHandler, 0x74},  // Channel 74 - Enhanced Capture Timer channel 3 
  {ErrorHandler, 0x75},  // Channel 75 - Enhanced Capture Timer channel 2 
  {ErrorHandler, 0x76},  // Channel 76 - Enhanced Capture Timer channel 1 
  {ErrorHandler, 0x77},  // Channel 77 - Enhanced Capture Timer channel 0 
  {ErrorHandler, 0x78},  // Channel 78 - Real Time Interrupt 
};

