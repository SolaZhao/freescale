======================================
Abatron BDI  Connection Release Notes
======================================

=========================
Bdik.tgt version v6.1.11
=========================

List of New Features
--------------------

-unregistered device PARTID leads to temporary selection by derivative list. However, this temporary selection cannot
 be saved into project and a service pack upgrade should be requested.

-It is possible to use the debugger Flash Programmer instead of the Abatron flash programming feature (on box firmware),
 when selecting the "Use the debugger eeprom and flash programmer" option in "Setup" dialog.
 Please then refer to "Flash Programming" documentation.
 
-It is possible to program "flat" on the PPAGE window. The destination page is preset by default.

-The "FLAT8000" can be used to set the page to program when programming in $8000-BFFF.
 Syntax: FLAT8000 <PPAGE value(hex)>

-HCS12X and HCS12XE Series support in general.

-HCS12XE Series MMCCTL1 register, ROMHM and RAMHM flags setup support:

--New command: HCS12X_MAP4000

 Syntax: HCS12X_MAP4000 FLASH|RAM|EXTERNAL

 Purpose: This command overrides the HCS12X_MAP4000 project environment variable. The variable and command
          can be used to indicate to the debugger, for S12X series, on what the $4000-$7FFF memory range is
          mapped. By default, it is mapped to FLASH.
          When used, the command should be placed in a Startup command file.

--New supported environment variable: HCS12X_MAP4000
 Syntax: HCS12X_MAP4000 = (0 | 1 | 2) 
   with:
   0 = FLASH (default)
   1 = RAM
   2 = EXTERNAL



-Debugging Memory Map dialog and Manager (Upgrade)
 -------------------------------------------------


--The Debugging Memory Map dialog and Manager provide now an access kind scheme (R/W, write only, read only, none) 
  which is no more merged with the type.
  By consequence, the "read protected", "write protected" and "r/w protected" types have
  been removed and setup matching these types has been casted to "physical" type, with the corresponding
  equivalent access kind.


--The "DMM OPENGUI" command opens directly the Debugging Memory Map dialog according to current MCUID.

--new command: "DMM SETAHEADREADSIZE". Sets data size to read before and after seeked address by the debugger.
  syntax: DMM SETAHEADREADSIZE <front size when halted> <back size when halted> <front size when running> <back size when running>

--When editing a data (in Data window or in Memory window), the debugger reads back only the modified data and 
  does not flush the current module cache.

--new command: "DMM WRITEREADBACKON". Enables the feature here above (default).

--new command: "DMM WRITEREADBACKOFF". Disables the feature here above. The debugger behaves like in previous
  releases and reads back the entire affected memory block.



-Debugging Memory Map dialog and Manager
 ---------------------------------------
The Debugging Memory Map dialog user interface replaces the "banked Memory Location" dialog
("Set Bank..." menu entry). This interface provides a global approach for all different
CPU families, each family having its own method for memory access and its own memory
onchip layout and memory module priorities.
By the way, the "BANKWINDOW" command has been completely removed, as banks handling is
now transparently handled by the Debugging Memory Map Manager. In case of error due to this
command execution, please remove/comment this command. In case of any further debugging problem
due to this command removal, please contact Metrowerks support team.

The graphical user interface is flexible enough to be handled without much text description
here, and live diagnostic is displayed within the dialog. Anytime, it is possible to revert
to default (factory) setup, and most of the time, the user does not need to edit/change settings
within this dialog.

Functionalities:

-Pressing "New" button will create a new module, and open directly the edition dialog to
 setup this new module.
-Pressing "Modify" opens the edition dialog of the selected module in list.
 More module information are displayed here, and an enhanced diagnostic is also displayed.
-Pressing "Delete" button will lead to module removing, after a warning dialog.
-Pressing "Revert to default" will remove the current setup (usually saved into current project)
 and retrieve the default (factory) setup for an internal database.

Module edition:

-"Enable memory module" options maps the module in the debugger. Unchecking this option
 makes the module completely "transparent" for the debugger.
-The "Type" drop down list provides all kinds of memory type available for this processor.
-The "Priority" drop down list provides all kinds of memory overlap priority available 
 for this processor. The debugger can have a bigger priority ("highest") to setup an upper
 module that can overlap an onchip module, this to make a display filter, e.g. creating
 an "no read access while running" memory range.
-The "Refresh memory when halting" option controls debugger memory cache. When this option
 is checked, internal image/cache of memory data are always deleted and the data is always
 retrieved from hardware when required by the debugger. When unchecked (usually by default
 for Non Volatile Memory areas) the debugger keeps a copy of the data and does not retrieve
 the data from hardware until next application loading/programming.
-The "no memory access while running" option can be used to discard debugger access to a
 memory range which can regularly be accessed while running. This feature is useful to protect
 onchip register flags from being triggered by debugger reads.

Remark: 

-Modules range/boundary are always limited to an overlapped module with a bigger priority.
 For example, if 2 bytes have been defined in a module which overlaps another module, accessing
 these 2 bytes will be performed using the 2-byte module properties. 
 The memory on both sides of these 2 bytes will be accessed using the overlapped module properties.


- Debugging Memory Map Manager command set
------------------------------------------
 
 The Debugging Memory Map Manager (DMM) has been extended with commands. The commands provide the 
 possibility to fully script the debugging device memory mapping. However, the usage of these
 commands should be limited to special debugging purposes, as the default mapping is typically
 sufficient, and a script setup being complex and possibly leading to debugger disfunctions.

 List of new commands:

 DMM
 DMM ADD <parameters>
 DMM DEL <module handle>
 DMM SAVE <mcuid>
 DMM DELETEALLMODULES
 DMM RELEASECACHES
 DMM CACHINGON|CACHINGOFF
 DMM HCS12MERHANDLINGON|HCS12MERHANDLINGOFF

 -"DMM" command.
 Syntax: DMM
 Purpose: Displays in the Command window the current DMM "Memory Types", "Overlap Priorities" and
          memory modules.
 
 -"DMM ADD" command.
 Syntax: DMM ADD <comment> <address> <size> <handle> <type> <cache locking> <priority> <mapping> <access while running>
   with: 
    -<comment> a string for Comment field; "£" must be used for " " (space).
    -<address> the start address of the module
	-<size> the size of the module
	-<handle> a long value for the DMM to handle the module (duplicated handled is not allowed).
	 Important: User defined handles must be a value superior or equal to 100.
	-<type> a value corresponding to a memory type handle, as given/listed with the DMM command.
	-<cache locking> a "0" or "1" value, "0" forcing the module to be refreshed after each debugger halting.
	-<priority> a value corresponding to an overlap priority handle/value, as given/listed with the DMM command.
	-<mapping> a "0" or "1" value, "1" enabling the module mapping.
	-<access while running> a "0" or "1" value, "1" enabling the module access while running.
	 This last parameter can be internally disabled according to the memory type.
 
 Purpose: insert a new module in the DMM, as if added via the DMM dialog/user interface.

 -"DMM DEL" command.
 Syntax: DEL <module handle>
  with <module handle>, a module handle as given/listed with the DMM command.
 Purpose: Delete one specific DMM module by handle reference.
 
 -"DMM SAVE" command.
 Syntax: DMM SAVE <mcuid>
  with <mcuid>, a part/device mcuid value in range $0-$FFFF.
 Purpose: saves the DMM current setup in current project ini file, under "DMM_MCUIDxxxx_MODULEn=..." keys.

 -"DMM DELETEALLMODULES" command.
 Syntax: DMM DELETEALLMODULES
 Purpose: removes all current DMM modules. Useful to start a scripted DMM setup.

 -"DMM RELEASECACHES" command.
 Syntax: DMM RELEASECACHES
 Purpose: flushes once all currently cached data for each module, even if the cache locking is 
          active, i.e. no refresh on halting is active.

 -"DMM CACHINGON" command.
 Syntax: DMM CACHINGON
 Purpose: data caching is engaged (default DMM setup). No refresh on halting is active for modules defined
          with this option.

 -"DMM CACHINGOFF" command.
 Syntax: DMM CACHINGOFF
 Purpose: data caching  is disabled. The debugger flushes all caches even for modules defined
          without this option. Each time the debugger halts, the memory data are retrieve from 
		  the target hardware for all modules.

 -"DMM HCS12MERHANDLINGON" command.
 Syntax: DMM HCS12MERHANDLINGON
 Purpose: enables the handling of Memory Expansion Registers for HCS12 devices, i.e. INITRM, INITRG and
          INITEE. The DMM remaps automatically module addresses according to the real value
		  of these registers when halting.
		  Note that the debugger does not poll these registers while running. Also the remapping
		  is performed only on factory defined modules, not user defined modules.
          
 -"DMM HCS12MERHANDLINGOFF" command.
 Syntax: DMM HCS12MERHANDLINGOFF
 Purpose: disables completely the feature here above. 


=========================
Bdik.tgt version v6.1.10
=========================

List of New Features
--------------------

-The BDIK Target interface has been renamed "Abatron BDI" connection, and
 the concept of "Target interfaces" has been requalified "Connections".
 The "BDIK" menu entry has been renamed "AbatronBDI".

Improvements
------------
- None.

List of fixed Bugs
------------------------------
- "Search Pattern" feature in the Memory window.

List of known Bugs
------------------------------
- None.


========================
Bdik.tgt version v6.1.9
========================

List of New Features
--------------------

- None.

Improvements
------------

- DBG12 code program flow rebuild:
. CALL instruction execution with destination outside bank/page window range ($8000-$BFFF) is 
  now also supported. 
. Code execution rebuild from $FFFx to $000x is now also supported.

 Onchip DBG module limitation
 ----------------------------
 . Real time code profiling and coverage is limited to non banked memory applications/code.

 Demo version limitations
 ------------------------
 - The DBG support is limited:
 . Code reconstruction is limited to the 20 latest instructions when in demo mode,
 . No Profiling nor coverage when in demo mode,
 . No Predefined triggers allowed when in demo mode.

List of fixed Bugs
------------------------------
- None.

List of known Bugs
------------------------------
- None.


========================
Bdik.tgt version v6.1.8
========================

List of New Features
--------------------

- The BDIK Target Interface provides now automatic HCS12 derivatives recognition through the device partID.
  HC12 derivatives (HC812A4, HC912B32, HC912D60, HC912DG128, HC912DA128, HC912D60A, HC912DG128A, HC912DT128A)
  are recognized according to the BDI Tool and transmitted Init List "CPU Type" setup to BDI box.
  

- The BDIK Target Interface provides now a direct application loading and flashing feature within
 the application Load menu. It is no more required to play flash handling commands from preload
 and postload command files: The "Load Code to onchip Non Volatile Memory" option plays in background
 required flash commands. When this option is selected, it is possible to choose an "All Bytes" verification
 option which will compare (after programming) the original code with the device programmed code (read back).
 Note that this option performs a device "mass erase". For partial code loading, eeprom data loading,
 the Flash/NVMC dialog and regular flash commands are still 100% available to specify special/selective 
 Non Volatile Memory operations to perform.


- HCS12 devices onchip DBG module support (for devices including this module):

 A complete graphical user interface is provided, using a dialog
 combined with context sensitive popup menus (mouse right-click) in Source, 
 Assembly, Data and Memory component windows to set the DBG module and triggers.

 This graphical interface is automatically enabled or disabled, according to the selected device
 (not all HCS12 devices provide the DBG module).

 The Metrowerks 8/16 bits debugger BDIK Target Interface provides thanks to the DBG module:
 . Hardware breakpoints and watchpoints,
 . Predefined Triggers,
 . Expert Triggers,
 . Program flow rebuild from DBG data capture within the Trace component which should be opened if desired,
 . Real time code profiling and coverage (periodical program counter capture) within Profiler
   and Coverage components which should be opened if desired.

 Using the BDIK Target Interface, three modes are available:
 .Default: Automatic (triggers, breakpoints, watchpoints, and trace possible)
 DBG Module used to set up 2 breakpoints or one watchpoint 
 or to set up triggers selected by the user from a Predefined list.
 The triggers comparator addresses can be set from the debugger Source, Assembly, Memory and Data component 
 using Set Trigger A or Set Trigger B pop up menu entry.
 The Trigger condition can be set using the Trigger Module Settings dialog Trigger settings property page 
 or using the pop up menu entries. 

 .Expert (triggers through Expert triggers property page, trace possible)
 User does need strong DBG module specific knowledge to use this mode. 
 The HCS12 core manual is needed, to understand the meaning of the flags.
 The triggers comparator addresses can be set from the debugger Source, Assembly, Memory and Data component 
 using Set DBGCA or Set DBGCB.
 To setup Expert triggers mode the Trigger Module Settings dialog Expert triggers property page must be used.

 .Profiling and coverage (no triggers, trace not possible)
 Choosing this mode, the DBG module is setup to code execution profiling and coverage.
 The Profiler and/or Coverage components should be opened to display results.
 No trigger nor DBG based controlpoints can be set, the debugger must be stopped on the user request 
 (the BDC breakpoint or software breakpoints can still be used).

 - Updated status bar:
 When the BDIK Target Interface has been loaded, if the current device supplies a DBG debug module,
 specific Trigger Module Settings information are given in the debugger status bar.

 Onchip DBG module limitation
 ----------------------------
 . Real time code profiling and coverage is limited to non banked memory applications/code.

 Demo version limitations
 ------------------------
 - The DBG support is limited:
 . Code reconstruction is limited to the 20 latest instructions when in demo mode,
 . No Profiling nor coverage when in demo mode,
 . No Predefined triggers allowed when in demo mode.

List of fixed Bugs
------------------------------
- None.

List of known Bugs
------------------------------
- None.

========================
Bdik.tgt version v6.1.7
========================

List of New Features
--------------------
- Released for PowerPC MPC5xx family support and CodeWarrior EPPC product.

List of fixed Bugs
------------------------------
- None.

List of known Bugs
------------------------------
- None.

========================
Bdik.tgt version v6.1.6
========================

List of New Features
------------------------------
- This version of the BDIK Target Interface supports HC12, HC16, MCORE and PPC.

List of Fixed Bugs
--------------------------
- Various modifications have been done in order to increase update time of the 
debugger when 
no memory is implemented.
- The status bar message "BDI RESET" has been changed to "Reset interrupt".

List of Known Bugs
----------------------------
- none.


========================
Bdik.tgt version v6.1.5
========================

List of New Features
------------------------------
- A Terminal emulation is now also available for PPC and MCORE families. The 
TERMINAL command 
should be used to set the terminal exchange area. Please check examples 
(calculator) delivered with 
the software installation. 
N.B.: The target code execution is halted during data transfer. 

- New feature for CPU12 Family ONLY:

   The BANKWINDOW commands has now the following syntax:

   BANKWINDOW (PPAGE | DPAGE | EPAGE) [OFF|ON] [<range> <reg address> <num of 
pages>]

   Important Remark: The Banked Memory Location dialog  (BDIK | Set Bank... menu 
entry) is a user-friendly graphical user interface to setup banks without using 
the BANKWINDOW command.

  Typing BANKWINDOW without any parameter lists the current settings:

  in>bankwindow
  PPAGE Settings:
  Status: enabled
  Reg. Adr: 0xff
  Range: 0x8000 to 0xbfff
  Number of Pages: 8

  DPAGE Settings:
  Status: disabled
  Reg. Adr: 0x34
  Range: 0x7000 to 0x7fff
  Number of Pages: 0

  EPAGE Settings:
  Status: disabled
  Reg. Adr: 0x36
  Range: 0x400 to 0x7ff
  Number of Pages: 0

  Typing "BANKWINDOW ON" enables the banked memory managing and typing 
"BANKWINDOW OFF" disables it.

  The regular way to set banks calling the BANKWINDOW command is: 

  BANKWINDOW <control register> <activity> <range> <reg address> <num of pages>

  <control register>: "PPAGE", "EPAGE" or "DPAGE", as defined in the CPU12 
register block of the derivative.
  <activity>: "ON" or "OFF". "ON" enables this page handling and "OFF" disables 
it.
  <range>: a memory address range matching the bank location. Regular debugger 
syntax, like "0x8000..0xBFFF".
  <reg address>: the address of the control register, like "0xFF" for PPAGE 
register address on the HC912DG128 derivative.
  <num of pages>: the number of pages/banks.

  For example, for the HC912DG128 derivative:

  BANKWINDOW PPAGE ON 0x8000..0xBFFF 0xFF 8

  The "activity" parameter can be omitted. The activity will be by default "ON". 

  Important Remark: The Banked Memory Location dialog  (BDIK | Set Bank... menu 
entry) is a user-friendly graphical user interface to setup banks without using 
the BANKWINDOW command.

List of Fixed Bugs
--------------------------
- none.

List of Known Bugs
----------------------------
- none.


========================
Bdik.tgt version v6.1.4
========================

List of New Features
------------------------------
- The BDIK target supports the CPU16 Family.

List of Fixed Bugs
--------------------------
- A progress bar is displayed during PRELOAD, POSTLOAD, STARTUP and RESET 
command files execution. 
- The Command Files dialog displays a message when the command file in the edit 
box does not exist: "Warning: The file above does not exist".

List of Known Bugs
----------------------------
- none.

========================
Bdik.tgt version v6.1.3
========================

List of New Features
------------------------------
- The BDIK target supports the MCS912DP256 derivative.

List of Fixed Bugs
--------------------------
- Debugging operations display in status bar for "assembly step", "single step", 
"step out", and "step over".
- Handling of dynamic (while target is running) hardware breakpoint insertion on 
banked code.

New Product Reminder (since V6.1.1)

The release V6.1.2 stands the Freescale PowerPC MPC5xx  family.

The BDIK Target Interface is a new target which replaces:
- The previous "bdi.tgt" - BDI Target Interface - for CPU16 and CPU32, 
- The previous "bdi12.tgt" - BDI-12 Target Interface - for CPU12, and the 
previous "bdi2000.tgt" target  - BDI2000 Target Interface - for M·CORE.

The BDIK Target Interface currently supports BDI - Background Debug Interfaces - 
designed by ABATRON AG, including BDI-HS on CPU12, CPU16 and CPU32, BDI1000 on 
CPU12, CPU16, CPU32, M·CORE and MPC5xx, and BDI2000 on CPU16, CPU32, M·CORE and 
MPC5xx.
For CPU12, banked memory handling is supported (e.g. M68HC812A4 and 
M68HC912DG128). Please see section Banked Memory Location below.
Requirements:
Make sure that your hardware target board is/has been designed with a Background 
Debug Mode - BDM - port for CPU background interfacing with the BDI interface 
and the debugger. Please check technical specifications provided by ABATRON User 
Manuals and Freescale. 
One free serial communication port of your computer will be required to 
communicate with the BDI interface, and least to set it up even if later you 
will use an Ethernet communication instead of an RS-232 serial communication.

Features

- This new release runs with the True-Time Simulator & Real-Time Debugger 
version 6.1.
- The hardware target status is detected at first connection. If a program is 
currently running, the debugger turns to RUNNING mode.
- It is possible to insert a breakpoint while the target is running. Note that 
internally, the target will be halted for breakpoint insertion then relaunched.
- Abatron Configuration Tool: When selecting the menu entry "BDIK | Setup...", 
you can specify the location of the BDI Box configuration tool from Abatron. 
When selecting the menu entry "BDIK | Configure BDI Box..." a file browser will 
be automatically open to locate the configuration tool. Then the path will be 
updated in the "Setup" dialog.
- Command Files: When selecting the menu entry "BDIK | Command Files...", you 
can specify the debugger command files usage. The dialog will give you an 
explanation on the execution of these command files. 
- BDIK.HLP: The BDIK Target interface is delivered with its online helpfile that 
you can open pressing "HELP" buttons within dialogs or "BDIK | Help" menu entry.
- Banked hardware Breakpoint for CPU12 (e.g. on HC912DG128): When selecting the 
menu entry "BDIK | Setup...", you can check "Continue on illegal break" to 
overcome the deficient 2-byte address size onchip break module which does not 
handle the PPAGE. Note that internally, the target will be halted by the 
hardware breakpoint, compared with the breakpoint that you set, then relaunched 
if not (bank) matching.
- Banked Memory Location for CPU12: When selecting the menu entry "BDIK | Set 
Bank...", you can specify the memory banks that you will use (e.g. with A4 and 
DG128). Note that the "BANKREG" command is still taken in account for 
compatibility reasons but should be removed to let you 100% monitor banks within 
the Banked Memory Location dialog. 

List of Known Bugs
----------------------------
- none.


========================
Bdik.tgt version v6.1.2
========================

List of New Features
------------------------------
- The release stands the Freescale PowerPC MPC5xx  family.
New Product Reminder (since V6.1.1)

The BDIK Target Interface is a new target which replaces:
- the previous "bdi.tgt" - BDI Target Interface - for CPU16 and CPU32, 
- the previous "bdi12.tgt" - BDI-12 Target Interface - for CPU12,
- and the previous "bdi2000.tgt" target  - BDI2000 Target Interface - for 
M·CORE.

The BDIK Target Interface currently supports BDI - Background Debug Interfaces - 
designed by ABATRON AG, including BDI-HS on CPU12, CPU16 and CPU32, BDI1000 on 
CPU12, CPU16, CPU32, M·CORE and MPC5xx, and BDI2000 on CPU16, CPU32, M·CORE and 
MPC5xx.
For CPU12, banked memory handling is supported (e.g. M68HC812A4 and 
M68HC912DG128). Please see section Banked Memory Location below.
Requirements:
Make sure that your hardware target board is/has been designed with a Background 
Debug Mode - BDM - port for CPU background interfacing with the BDI interface 
and the debugger. Please check technical specifications provided by ABATRON User 
Manuals and Freescale. 
One free serial communication port of your computer will be required to 
communicate with the BDI interface, and least to set it up even if later you 
will use an Ethernet communication instead of an RS-232 serial communication.

Features

- This new release runs with the True-Time Simulator & Real-Time Debugger 
version 6.1.
- The hardware target status is detected at first connection. If a program is 
currently running, the debugger turns to RUNNING mode.
- It is possible to insert a breakpoint while the target is running. Note that 
internally, the target will be halted for breakpoint insertion then relaunched.
- Abatron Configuration Tool: When selecting the menu entry "BDIK | Setup...", 
you can specify the location of the BDI Box configuration tool from Abatron. 
When selecting the menu entry "BDIK | Configure BDI Box..." a file browser will 
be automatically open to locate the configuration tool. Then the path will be 
updated in the "Setup" dialog.
- Command Files: When selecting the menu entry "BDIK | Command Files...", you 
can specify the debugger command files usage. The dialog will give you an 
explanation on the execution of these command files. 
- BDIK.HLP: The BDIK Target interface is delivered with its online helpfile that 
you can open pressing "HELP" buttons within dialogs or "BDIK | Help" menu entry.
- Banked hardware Breakpoint for CPU12 (e.g. on HC912DG128): When selecting the 
menu entry "BDIK | Setup...", you can check "Continue on illegal break" to 
overcome the deficient 2-byte address size onchip break module which does not 
handle the PPAGE. Note that internally, the target will be halted by the 
hardware breakpoint, compared with the breakpoint that you set, then relaunched 
if not (bank) matching.
- Banked Memory Location for CPU12: When selecting the menu entry "BDIK | Set 
Bank...", you can specify the memory banks that you will use (e.g. with A4 and 
DG128). Note that the "BANKREG" command is still taken in account for 
compatibility reasons but should be removed to let you 100% monitor banks within 
the Banked Memory Location dialog. 

List of Fixed Bugs
--------------------------
- none.

List of Known Bugs
----------------------------
- none.


========================
Bdik.tgt version v6.1.1
========================

List of New Features
------------------------------
The BDIK Target Interface is a new target which replaces:
- the previous "bdi.tgt" - BDI Target Interface - for CPU16 and CPU32, 
- the previous "bdi12.tgt" - BDI-12 Target Interface - for CPU12,
- and the previous "bdi2000.tgt" target  - BDI2000 Target Interface - for 
M·CORE.

The BDIK Target Interface currently supports BDI - Background Debug Interfaces - 
designed by ABATRON AG, including BDI-HS on CPU12, CPU16 and CPU32, BDI1000 on 
CPU12, CPU16, CPU32, M·CORE and MPC5xx, and BDI2000 on CPU16, CPU32, M·CORE and 
MPC5xx.
For CPU12, banked memory handling is supported (e.g. M68HC812A4 and 
M68HC912DG128). Please see section Banked Memory Location below.
Requirements:
Make sure that your hardware target board is/has been designed with a Background 
Debug Mode - BDM - port for CPU background interfacing with the BDI interface 
and the debugger. Please check technical specifications provided by ABATRON User 
Manuals and Freescale. 
One free serial communication port of your computer will be required to 
communicate with the BDI interface, and least to set it up even if later you 
will use an Ethernet communication instead of an RS-232 serial communication.

Features

- This new release runs with the True-Time Simulator & Real-Time Debugger 
version 6.1.
- The hardware target status is detected at first connection. If a program is 
currently running, the debugger turns to RUNNING mode.
- It is possible to insert a breakpoint while the target is running. Note that 
internally, the target will be halted for breakpoint insertion then relaunched.
- Abatron Configuration Tool: When selecting the menu entry "BDIK | Setup...", 
you can specify the location of the BDI Box configuration tool from Abatron. 
When selecting the menu entry "BDIK | Configure BDI Box..." a file browser will 
be automatically open to locate the configuration tool. Then the path will be 
updated in the "Setup" dialog.
- Command Files: When selecting the menu entry "BDIK | Command Files...", you 
can specify the debugger command files usage. The dialog will give you an 
explanation on the execution of these command files. 
- BDIK.HLP: The BDIK Target interface is delivered with its online helpfile that 
you can open pressing "HELP" buttons within dialogs or "BDIK | Help" menu entry.
- Banked hardware Breakpoint for CPU12 (e.g. on HC912DG128): When selecting the 
menu entry "BDIK | Setup...", you can check "Continue on illegal break" to 
overcome the deficient 2-byte address size onchip break module which does not 
handle the PPAGE. Note that internally, the target will be halted by the 
hardware breakpoint, compared with the breakpoint that you set, then relaunched 
if not (bank) matching.
- Banked Memory Location for CPU12: When selecting the menu entry "BDIK | Set 
Bank...", you can specify the memory banks that you will use (e.g. with A4 and 
DG128). Note that the "BANKREG" command is still taken in account for 
compatibility reasons but should be removed to let you 100% monitor banks within 
the Banked Memory Location dialog. 

List of Fixed Bugs
--------------------------
- none.

List of Known Bugs
----------------------------
- none.
