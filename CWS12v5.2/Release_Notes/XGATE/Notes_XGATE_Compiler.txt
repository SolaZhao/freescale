RELEASE NOTES COMPILER XGATE

RELEASE NOTES CXGATE V5.0.12
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

List of new Features
- Environment variable expansion in the command line (also applies to command line arguments 
  provided via the -ArgFile option). The syntax is $(ENV_VAR) or ${ENV_VAR}. 
  Example: cxgate -I{INC_PATH} test.c

List of fixed Bugs
- None.

List of known Limitations
- This compiler does not support IEEE64 floating point numbers. 
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion.   

List of known Bugs
- None.

RELEASE NOTES CXGATE V5.0.11
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

List of new Features
- MISRA-C:2004 compliant libraries.

List of fixed Bugs
- MTWX40760, incorrect code generated for an "if" condition, when peephole optimization is enabled:
  volatile short int target_time;
  volatile unsigned short int now;
  if((short int)(target_time - now) <= 0) {
	...
  }
  Generated code (missing CMP instruction):
  SUB R2,R3,R2
  BGT *L8
  Workaround: disable the peephole optimizer with option "-OnP".
- MTWX34110, internal error on compiling the following code:
  volatile struct{
    byte t[256];
    byte pos;
  } s;
  s.t[s.pos] = 5; /* the assignment lhs causes an internal error to occur */

List of known Limitations
- This compiler does not support IEEE64 floating point numbers. 
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion.   

List of known Bugs
- None.

RELEASE NOTES CXGATE V5.0.10
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

List of new Features
- None

List of fixed Bugs
- MTWX37673, incorrect code generated for the multiplication below, when copy propagation is enabled:
  float foo(float x)
  {
    x *= x;
    if (x < .5) 
	  x *= 2.; /* wrong code generated for this multiplication */
    return x;
  }
  Workaround: compile the code with option -Od=a.

List of known Limitations
- This compiler does not support IEEE64 floating point numbers. 
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion.   

List of known Bugs
- None

RELEASE NOTES CXGATE V5.0.9
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

List of new Features
- The code size limitation for C++ is now 512 bytes in case no license is available (was 128 bytes).

List of fixed Bugs
- None

List of known Limitations
- This compiler does not support IEEE64 floating point numbers. 
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion.   

List of known Bugs
-MTWX33858: error when accessing on-stack bitfield:
  typedef union  {
        unsigned int raw;
        struct {
                unsigned int x:11;
                unsigned int y:5;
        }f;
  } bf_t;
  unsigned int foo(unsigned int a) 
  {
    bf_t* pA;
    pA = (bf_t *)&a;
    return pA->f.y; /* wrong access generated here */
  }
  As workaround, the variable (the bitfield) can be declared as static or the function can be compiled with the following option: -Od=d.
  Use #pragma OPTION to enable this option for a single function:
  #pragma OPTION ADD my_handle "-Od=d"
  uint16_t GetY(uint16_t a) {
  /* ... */
  }
  #pragma OPTION DEL my_handle

RELEASE NOTES CXGATE V5.0.8
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

List of new Features
- None

List of fixed Bugs
- MTWX30265: Wrong result when performing subtranctions with float value 0.0.
- MTWX28731: When using the following two assembly instructions in inline assembly the encoding is not generated correctly: NEG RD, COM RD. 
  The workaround is to use the instructions they stand for: SUB RD,R0,RD and XNOR RD,R0,RD respectively.
- MTWX29410, an incorrect offset is used when accessing an array within a loop. Example:
  unsigned int  arr[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  void foo(void) {
    unsigned char i;
    unsigned int t;
    for (i = 0; i < 10; i++) {
      t = arr[i];
      arr[i] = t*2; // error
    }
  }

List of known Limitations
- This compiler does not support IEEE64 floating point numbers. 
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion. 

List of known Bugs
 - None

Demo Version Limitations
If you do have a demo version of the compiler, there are following limitations:
- Total code size for a source file (compilation unit) is limited to 128 bytes

RELEASE NOTES CXGATE V5.0.7
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

List of new Features
- None

List of fixed Bugs
- MTWX28702, missing #pragma DATA_SEG XGATE_DATA from hidef.h.
- MTWX26429, subtraction of two floats on XGATE takes too long when both of them are 0. It spends 7ms at 80MHz XGATE. The usual time spent by the subtraction of two floats on XGATE is up to 10us. 

List of known Limitations
- This compiler does not support IEEE64 floating point numbers. 
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion.   

List of known Bugs
- MTWX28731: When using the following two assembly instructions in inline assembly the encoding is not generated correctly: NEG RD, COM RD. 
  The workaround is to use the instructions they stand for: SUB RD,R0,RD and XNOR RD,R0,RD respectively.

Demo Version Limitations
If you do have a demo version of the compiler, there are following limitations:
- Total code size for a source file (compilation unit) is limited to 128 bytes

RELEASE NOTES CXGATE V5.0.6
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

List of new Features
- None

List of fixed Bugs
- MTWX28702, missing #pragma DATA_SEG XGATE_DATA from hidef.h.
- MTWX26429, subtraction of two floats on XGATE takes too long when both of them are 0. It spends 7ms at 80MHz XGATE. The usual time spent by the subtraction of two floats on XGATE is up to 10us. 
- MTWX22641 Access to a local variable corrupts the return address on stack of some function. This bug may happen when the size of the stack frame
  exceeds 32 bytes and some parameters are passed via register. Workaround: force all parameters beeing passed via stack by adding an ellipsis to the callee function
  definition.
- MTWX21038 wrong assumption that struct member access via pointer is loop invariannt if there is a second non aliasing access in the same loop.
  The compiler moved the access out of the loop which was wrong.
- MTWX21039 internal compiler error for bitfield operation NOT or XOR via pointer with large member offset. E.g. p->bf = ~p->bf
- MTWX20897 wrong preprocessing of #include <pp_tolens> if file is in fact only included once (because of guard or option -pio).
  Example:
  #define GETC_H <mtwx20897.h>
  #include <mtwx20897.h>    
  #include GETC_H  
- MTWX20683 compiler optimized away a CMPL instruction also if high byte caused setting the flags. This caused some wrong branches.
- MTWX20634: when the license file is accessed using the path from the LM_LICENSE_FILE environment variable (i.e. there is no license.dat in the
  tool's directory or its parent, nor is there a hiware.dat license file), and a required feature expires in less than 10 days, a crash occurs.
  This bug is fixed for build numbers greater than 6088.
- MTWX20080 (performance, not a bug), translation of bitfield NOT operation on same address (e.g. s.b0 = ~s.b0) was inefficient. Now it is 
  effitiently translated with a single XNOR operation without bitfiled extraction.
- Fixed: the inline assembler did not handle pseudo-instructions with 16-bit immediates (e.g. LDW RD, #IMM16)

List of known Limitations
- This compiler does not support IEEE64 floating point numbers. 
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion. 

List of known Bugs
- MTWX28731: When using the following two assembly instructions in inline assembly the encoding is not generated correctly: NEG RD, COM RD. 
  The workaround is to use the instructions they stand for: SUB RD,R0,RD and XNOR RD,R0,RD respectively.

Demo Version Limitations
If you do have a demo version of the compiler, there are following limitations:
- Total code size for a source file (compilation unit) is limited to 128 bytes

RELEASE NOTES CXGATE V5.0.5
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

List of new Features
- None

List of fixed Bugs
- MTWX20676 no error issued by the inline assembler when "Index plus Register Offset" addressing mode is used with instructions
  that do not support this addressing mode.
- MTWX20683 compiler optimized away a CMPL instruction also if high byte caused setting the flags. This caused some wrong branches.
- MTWX20634: when the license file is accessed using the path from the LM_LICENSE_FILE environment variable (i.e. there is no license.dat in the
  tool's directory or its parent, nor is there a hiware.dat license file), and a required feature expires in less than 10 days, a crash occurs.
  This bug is fixed for build numbers greater than 6088.
- MTWX20080 (performance, not a bug), translation of bitfield NOT operation on same address (e.g. s.b0 = ~s.b0) was inefficient. Now it is 
  efficiently translated with a single XNOR operation without bitfiled extraction.
- MTWX19986, crash after trying to spill and reload the carry flag. 
  Example:
  char sem = _ssem(0);
  ....  // some carry overwriting code
  if (sem) ...
- MTWX19496, crash after trying to branch tail merge instrinsics (e.g. csem).
- MTWX19399, wrong register trace equivalence information for indirect memory references. The compiler assumed
  that 2 operands have the same value and optimized away a register-register move instruction. In reality, the
  assignment of the 2 operands is after the place where the register-register move instruction has been replaced.
- MTWX19388, wrong autoincrementation of pointer pointing to an indirection with non zero offset
- MTWX19383, wrong autoincrementation of volatile pointer pointing to a local array.
- MTWX19360, wrong indirect bitfield access for bitfields with 8 bit size and 36 bit offset. 
  bug can happen for all indirect 8 bit large bitfields with non zero offset modulo 8.

List of known Limitations
- This compiler does not support IEEE64 floating point numbers. 
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion. 

List of known Bugs
- none.

Demo Version Limitations
If you do have a demo version of the compiler, there are following limitations:
- Total code size for a source file (compilation unit) is limited to 128 bytes

RELEASE NOTES CXGATE V5.0.4
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

List of new Features
- If the option -Cstv=<value> is switched off, the compiler does no longer initialize the stack pointer R7 to 0.
  To restore the old semantics please set the option -Cstv=0. The semantics of the option -Csini0 remains unchanged.

List of fixed Bugs
- MTWX18920, internal error while compiling and endless loop with an array assess with a struct field as index.
- MTWX18308, internal error while compiling an interrupt handler containing a condition code that had to be saved in another register.
  The compiler was not able to make free another register. Now the compiler can handle this rare cases too.

List of known Limitations
- This compiler does not support IEEE64 floating point numbers. 
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion.  

List of known Bugs
- none.

Demo Version Limitations
If you do have a demo version of the compiler, there are following limitations:
- Total code size for a source file (compilation unit) is limited to 128 bytes

RELEASE NOTES CXGATE V5.0.3
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

List of new Features
- Improved multi dimensional array handling with offsets. 
  E.g. arr[i+1][1] and arr[i][j] can now share the arr[i] as common subexpression.

List of fixed Bugs
- Opening files from the builtin Windows GUI with double clicking did cause a crash 
  if the File->Configuration->Editor Settings dialog was configured as "CodeWarrior (with COM)" and if an old IDE 4.1 was 
  configured as current CodeWarrior IDE to be used. It did work as expected with if any
  more recent CodeWarrior IDE was registered.

List of known Limitations
- This compiler does not support IEEE64 floating point numbers. 
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion. 

List of known Bugs
- none.

Demo Version Limitations
If you do have a demo version of the compiler, there are following limitations:
- Total code size for a source file (compilation unit) is limited to 128 bytes


RELEASE NOTES CXGATE V5.0.2
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

Compatibility Notes.
  This compiler generats code according to the final XGATE specification. This includes the "TFR RX,PC" instruction.
  In the first preliminary silicon release of the MC9S12XDP512 maskset L40V this instruction is NOT supported. Therefore without special preparation, the generate
  code will NOT work. To use this compiler with the a MC9S12XDP512 maskset L40V, do the following steps:
  - Use the compiler option -onbra
  - rebuild the XGATE library with -onbra
  - The code has to be adapted to the XGATE register changes. Especially the XGMCTL register used to enable the XGATE is different.

List of new Features
- new Alias Analysis option -oa("addr"|"ansi"|"type"|"none"). Use this option to avoid reloading data that might 
  be aliased by another memory access. This option is critical for performance of RISC architectures.
  The default is -oaaddr for safety reason (each program fulfills alias by address).
  related topic: restrict keyword.
- new IEEE32 floating point machine library
- global initializations with constant address differences between the same object are now possible.
  Example:  
  struct {
    int a,b,c;
  } s;
  int diff = (char *)&s.c - (char *)&s.a;
- the 16x16 runtime multiplication routine _IMUL has been optimized.
- using the option -Oc does now cause the message "C54: Option -Oc: depreciated". This option is also no longer displayed in the 
  graphical user interface.
  With previous compilers, using -oc was silently ignored. 
  Note: There are other option to control the actually done common subexpression elimination.
- HLI supports now the new XGATE instruction "TFR RX,PC".
- Lingering time for floating licenses has been extended to 10 minutes, to allow caching of licenses (to reduce compilation time)
- Moved the macro CLOCKS_PER_SEC from hidef.h into time.h
- Mapping unknown messages is now treated as warning and no longer as error. This change allows to maintain compatibility with old build tools when removing no longer used messages.
- new option -LpCfg=m to suppress information about file names in preprocessing output file (option -Lp)
- new option -LpCfg=e to allow empty lines in preprocessing output file (option -Lp)

List of fixed Bugs
- Preprocessor conditions are now evaluated with long arithmetic.
  The previous compiler did use the same arithmetic when evaluating preprocessor conditions
  as when evaluating constant conditions in C code.
  However ANSI C 89 mandates that for preprocessor conditions (#if's)
  the int representation should be enhanced to the representation one of long.
  Example (assuming int is 16 bit):
  #if 30000 + 30000 + 30000 == 90000 // TRUE
  #endif
  void test(void) {
    if (30000 + 30000 + 30000 == 90000) { // FALSE
    }
  }

  Explanation.
  For ANSI C, the result of a int + int operation has the type int.
  Therefore the type of "30000 + 30000 + 30000" is int. 
  If int is 16 bits the additions do overflow and the condition evaluates to FALSE.
  However while evaluating the expression for the preprocessor, int is extended to 32 bits.
  Therefore the additions do no longer overflow and the expression in the #if evaluates to TRUE.
- MTWX16009 reduce complexity from exponential to linear time. It only happened for empty switch statements with a certain number of case labels.
  The compilation time was O(2 ^ nof_labels). Now it is O(nof_labels).
- MTWX15771: avoid wrong floating point conversion optimization: -(double)(int) ->(double)-(int) opti
- MTWX15761: wrong common subexpression elimination for ANDH rx,#2 and ANDL rx,#2. The ANDL rx,#2 was optimized which is wrong in this case. 
- MTWX15441: Internal overflow with many include files fixed. 
  This overflow did cause wrong debug (line) information or could also cause crashes.
  In addition increased the limitation to 512 concurrent include files.
- MTWX14754, wrong offset while accessing structure containing an array. Only the second access is wrong. The indexes are 2 * i for the first access and 2 * i + 1 for the second.
- Fixed: preprocessor bug. macros which do expand to a function style macro with the braces not being part of expanded part of the initial macro are now correctly handled.

List of known Limitations
- This compiler does not support IEEE64 floating point numbers. 
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion. 

List of known Bugs
- none.

RELEASE NOTES CXGATE V5.0.1
Note: These Release Notes contain some information about the C++ Compiler. If your
license configuration does not include the C++ feature, just ignore all topics related to C++.
NOTE: Recompile all your sources

Welcome to the initial XGATE compiler release.

Calling Convention:
- Argument passing:
   - Open parameter (e.g. "printf(const char* s, ...)"):
      All arguments are passed on the stack in reverse order.
   - Normal arguments
      The last 3 arguments are passed in the registers R2, R3, R4 if they are 16 bit or less.
      The remaining arguments are passed on the stack.
   - 32 bit longs are passed in 2 registers if they still fit or on the stack otherwise.
- Return Value:
   - a 8 or 16 bit return value is returned in R2.
   - a 32 bit return value is returned in R2/R3 (low word in R2). 
- Stack:
   - By convention the stack is generated with the R7 register. By default the top of stack is automatically at the XGATE address 0xFFFE.
- Return Address:
   - By convention the return address is passed in the R6 register
- Function Name Mangling
   - because XGATE code can be linked together with HC12 code and both should be able to use separate functions for the standard library (e.g. strlen),
   all XGATE function names are automatically mangled with a __X_ prefix.
- Callee save registers.
  R5 and R1 (and by its functionality R6) are callee saved by convention.
  They are automatically stored in the entry code and restored in the exit code.
- Main Thread functions.
  interrupt functions are used to implement main thread functions. They are automatically terminated with a RTS (return from scheduler)
  and they don't save R5/R6/R1.
  Example:
  int sum(int i, int j) {
    return i+j;
  }
  Generates a function with the link time name "__X_sum"
  And the following code:
    0000 1b8e             ADD        R2,R3,R2
    0002 05f6             JAL        R6
- Automatic frame pointer in Main Thread functions.
  All interrupt functions can have a single 16 bit argument, usually either a pointer or an int. 
  This argument is then automatically passed in R1 from the XGATE vector table by the hardware.
  Note that for non interrupt functions a 16 bit parameter is passed in R2 (and not R1). If this argument should be preserved into other functions
  either use a global or pass it as explicit register parameter.
  Example:
    struct SciBuffer {
      char buf[10];
    };
    interrupt void HandleSci( struct SciBuffer* ptr) {
      //...
    }
- Startup
  The normal startup sequence is that the HCS12X application gets first initialized. Then the HC12 code copies the XGATE code into RAM,
  configures the XGATE core and finally enables the XGATE. As debug only alternative for a HC12, also a debugger command file
  can take over the job of the XGATE initialization. In this debug setup, the XGATE code can be loaded directly into ram as this works
  with the debugger controlling the application anyway.
  Please generate an example with the wizard or look into the "(CodeWarrior_Examples)\HCS12X" folder for sample setups.
  In a HCS12X/XGATE setup, the XGATE code is programmed by the debugger into the flash and then copied at runtime by the HCS12X into RAM.
  To be able to debug this setup, use the linker command file directive RELOCATE_TO. As all XGATE code has to be handled like this,
  it has to be in the section XGATE_CODE (or the prm file and the HC12 main application have to be adapted).
- Floating point support
  This compiler release does not support floating point. The compiler does generate calls to non existing routine routines.
- High Level Inline Assembly
  This compiler does support HLI, however the compiler does not yet allow interaction with C objects (not tested). And the compiler does not
  consider any side effects from HLI code (destroyed registers or changed stack offsets). Using "__asm SIF;" however is safe.
  HLI code using registers should be placed in its own function. With the following pragmas, the compiler will not generate frame or return code:
    #pragma NO_FRAME
    #pragma NO_EXIT
    #pragma NO_RETURN
- Initialization of global variables.
  As in the normal HCS12X/XGATE setup, the global variables in the application are shared between the two cores.
  Therefore the HCS12X startup code (start12.c) will setup the global variables used by the XGATE only as well.
- XGATE vector table.
  The XGATE vector table has to be setup in user code. It is not supported to configure it in the prm file 
  or to use the compiler interrupt vector number syntax because the vector table does also contain a frame pointer.

List of new Features since alpha 2
- 1-54681434: New option -LicWait. If set and used with floating license configuration, if no license is available from the license server,
  it will wait until a license is available. This is useful if you want to wait until a license is free, e.g. with batch jobs.
- support of intrinsic functions. They are declared in intrinsics_xgate.h located in \lib\xgatec\include.
  All intrinsic functions start with a leading underscore (e.g. _csem).
- support of the C99 keyword 'restrict'. To get dense and fast code, it is important to qualify pointers to channel data with restrict.
  Example:
    void __interrupt Xgate_CAN_Receive ( XGCANstruct * restrict pchannel )
- the compiler now uses the official ELF ID EM_XGATE with value 115.
- Alpha2 did use different registers than this beta release. The complete code has to be built with this version. Assembly code written for alpha 2 has to be adapted.
  Alpha2 Register Usage:   Beta1 Register usage:
       R1  -> R1  (interrupt function argument. For non interrupt functions, callee saved)
       R2  -> R7  (Stack Pointer)
       R3  -> R2  (First Argument, return value)
       R4  -> R3  (Second Argument)
       R5  -> R6  (Return Address)
       R6  -> R4  (Third Argument)
       R7  -> R5  (Callee saved)
- many unnecessary zero extensions are no longer generated.
- interaction of HLI with C code
  - the compiler generated is now aware of registers used/overwritten in HLI code.
  - local variables can be directly accessed from HLI code
- the compiler generated DWARF debug information does now contain a user defined attribute with number 0x3120 with content "XGATE" in the compilation unit tag.
  This attribute can be used to differentiate HCS12X compilation units from XGATE compilation units in ELF files containing code from
  both cores.

List of new Features
- Fixed: only numbers starting with a digit were accepted for hex notation (e.g. $1234) in
  inline assembly. Now the full range of hexadecimal numbers are accepted. See compiler manual for details.
- Support for binary numbers (e.g. 0b100101). See compiler manual for details.
- The messages C1800 and C1801 (missing prototype) show now the function name causing the message too
- The about box (and option -Lic) shows now as well borrowing status (same as lmborrow.exe -status)
- New option -LicBorrow:
  -LicBorrow    Borrow license feature (-LicBorrow<feature>:<Date>, <Date> in dd-mmm-yyyy[:hh:mm] format and 
  time in 24-hour hh:mm format)
  It enables selective borrowing of features (supported by the application). Note that borrowing is only supported
  if enabled in the license file by the BORROW keyword.
- This is the initial version of the XGATE ANSI C Compiler.
- In case of an expire/evaluation license, you are now warned 10 days before the license expires.
  The warning dialog box pops up once every day.
- FLEXlm support for BORROWING. Note that BORROWING is only available for floating licenses, and may be sold
  as a separate product or for an additional fee. BORROWING is used so you can work with a floating license
  even if you are disconnected from the licensing server. See FLEXlm user manuals for details on BORROWING.
  Note that this product needs a FLEXlm daemon (metrowks.exe on the licensing server) with following
  version information:
  FLEXlm v8.4a (lmgr.lib), Copyright (c) 1988-2003 by Macrovision Corporation. All rights reserved.
  The latest FLEXlm floating server software can as well be downloaded from the www.metrowerks.com
  web page, or get in touch with support to get the latest version.
- The check for demo or license limitation on code size happens now at the end of the compilation unit.
  In case you are running into such a limitation, this provides better feedback and an indication
  what kind of upgrade license would be required.

List of known Limitations
- This compiler does not support floating point numbers. No calculations with double of float can be done.
  Actually the compiler does generate code for floating point operations, but at link time no floating point runtime routines are present.
- there is currently no compiler manual or help file for the XGATE compiler available.
- Not all ANSI library functions are provided with the XGATE.
- The debug information does currently work with HCS12X logical addresses and not with XGATE addresses. This can cause some confusion. 

List of fixed Bugs (rc1)
- missing alignment for some multi bit bitfields

List of fixed Bugs (since alpha2)
- MTWX11843: treeopt bug for patterns "a -= b; a++;" and "a++; a-= b;". Treeopt generated "a -= b + 1;" instead of "a -= b - 1;"
- HLI instruction "NEG RX" or "COM RX" did not generate correct code. "NEG RX, RX" did work however.
- The reload of an addresses with ORH did destroy the condition code flags so that in some cases the wrong branch was taken.

List of known Bugs
Note: Some bugs do only concern the C++ version of the compiler.
- none.
